Nur in coreutils-8.30-patched/src/: [.
Nur in coreutils-8.30-patched/src/: b2sum.
Nur in coreutils-8.30-patched/src/: base32.
Nur in coreutils-8.30-patched/src/: base64.
Nur in coreutils-8.30-patched/src/: basename.
Nur in coreutils-8.30-patched/src/: basename.o.
Gemeinsame Unterverzeichnisse: coreutils-8.30/src/blake2 und coreutils-8.30-patched/src/blake2.
Nur in coreutils-8.30-patched/src/: cat.
Nur in coreutils-8.30-patched/src/: cat.o.
Nur in coreutils-8.30-patched/src/: chcon.
Nur in coreutils-8.30-patched/src/: chcon.o.
Nur in coreutils-8.30-patched/src/: chgrp.
Nur in coreutils-8.30-patched/src/: chgrp.o.
Nur in coreutils-8.30-patched/src/: chmod.
Nur in coreutils-8.30-patched/src/: chmod.o.
Nur in coreutils-8.30-patched/src/: chown.
Nur in coreutils-8.30-patched/src/: chown-core.o.
Nur in coreutils-8.30-patched/src/: chown.o.
Nur in coreutils-8.30-patched/src/: chroot.
Nur in coreutils-8.30-patched/src/: chroot.o.
Nur in coreutils-8.30-patched/src/: cksum.
Nur in coreutils-8.30-patched/src/: cksum.o.
Nur in coreutils-8.30-patched/src/: comm.
Nur in coreutils-8.30-patched/src/: comm.o.
diff coreutils-8.30/src/copy.c coreutils-8.30-patched/src/copy.c
131a132,197
> struct progress_status { 
>   int iCountDown; 
>   char ** cProgressField; 
>   struct timeval last_time; 
>   int last_size, iBarLength; 
>   struct stat src_open_sb; 
> }; 
> 
> /* Begin progress Mod*/ 
> static void file_progress_bar ( char * _cDest, int _iBarLength, long _lProgress, long _lTotal ) 
> { 
>     double dPercent = (double) _lProgress / (double) _lTotal * 100.f; 
>     sprintf( _cDest + ( _iBarLength - 6), "%4.1f", dPercent );
>     _cDest[_iBarLength - 2] = ' '; 
> 
>     int i; 
>     for ( i=1; i<=_iBarLength - 9; i++) 
>     { 
>         if ( dPercent > (double) (i-1) / (_iBarLength - 10) * 100.f )
>         {
>             _cDest[i] = '='; 
>         }
>         else 
>         {
>             _cDest[i] = ' '; 
>         }
>     }
>     for ( i=1; i<_iBarLength - 9; i++) 
>     { 
>         if ( ( _cDest[i+1] == ' ' ) && ( _cDest[i] == '=' ) )
>             _cDest[i] = '>' ; 
>     }
> }
> 
> int file_size_format ( char * _cDst, long _lSize, int _iCounter )
> {
>   int iCounter = _iCounter;
>   double dSize = ( double ) _lSize;
>   while ( dSize >= 1000. )
>   {
>     dSize /= 1024.;
>     iCounter++;
>   }
> 
>   /* get unit */
>   char * sUnit;
>   if ( iCounter == 0 )
>     sUnit = "B";
>   else if ( iCounter == 1 )
>     sUnit = "KiB";
>   else if ( iCounter == 2 )
>     sUnit = "MiB";
>   else if ( iCounter == 3 )
>     sUnit = "GiB";
>   else if ( iCounter == 4 )
>     sUnit = "TiB";
>   else
>     sUnit = "N/A";
> 
>   /* write number */
>   return sprintf ( _cDst, "%5.1f %s", dSize, sUnit );
> }
> /* END progress mod */
> 
> 
> 
228c294,295
<              bool *last_write_made_hole)
---
>              bool *last_write_made_hole,
>              struct progress_status *s_progress)
236a304,382
> 
> 
>     if (progress) {
>           /* BEGIN progress mod */
>           /* update countdown */
>           s_progress->iCountDown--;
>           char * sProgressBar = s_progress->cProgressField[5]; 
>           if ( s_progress->iCountDown < 0 )
>             s_progress->iCountDown = 100;
> 
>           /* just print one line with the percentage, but not always */
>           if ( s_progress->iCountDown == 0 )
>           {
>             /* calculate current speed */
>             struct timeval cur_time;
>             gettimeofday ( & cur_time, NULL );
>             int cur_size = g_iTotalWritten + *total_n_read / 1024;
>             int usec_elapsed = cur_time.tv_usec - s_progress->last_time.tv_usec;
>             double sec_elapsed = ( double ) usec_elapsed / 1000000.f;
>             sec_elapsed += ( double ) ( cur_time.tv_sec - s_progress->last_time.tv_sec );
>             int copy_speed = ( int ) ( ( double ) ( cur_size - s_progress->last_size )
>               / sec_elapsed );
>             char s_copy_speed[20];
>             file_size_format ( s_copy_speed, copy_speed, 1 );
>             /* update vars */
>             s_progress->last_time = cur_time;
>             s_progress->last_size = cur_size;
> 
>             /* how many time has passed since the start? */
>             int isec_elapsed = cur_time.tv_sec - g_oStartTime.tv_sec;
>             int sec_remaining = ( int ) ( ( double ) isec_elapsed / cur_size
>               * g_iTotalSize ) - isec_elapsed;
>             int min_remaining = sec_remaining / 60;
>             sec_remaining -= min_remaining * 60;
>             int hours_remaining = min_remaining / 60;
>             min_remaining -= hours_remaining * 60;
>             /* print out */
>             sprintf ( s_progress->cProgressField[3],
>               "Copying at %s/s (about %uh %um %us remaining)", s_copy_speed,
>               hours_remaining, min_remaining, sec_remaining );
> 
>             int fs_len;
>             if ( g_iTotalFiles > 1 )
>             {
>               /* global progress bar */
>               file_progress_bar ( s_progress->cProgressField[2], s_progress->iBarLength,
>                                   g_iTotalWritten + *total_n_read / 1024, g_iTotalSize );
> 
>               /* print the global status */
>               fs_len = file_size_format ( s_progress->cProgressField[1] + s_progress->iBarLength - 21,
>                                               g_iTotalWritten + *total_n_read / 1024, 1 );
>               s_progress->cProgressField[1][s_progress->iBarLength - 21 + fs_len] = ' ';
>             }
> 
>             /* current progress bar */
>             file_progress_bar ( sProgressBar, s_progress->iBarLength, *total_n_read, s_progress->src_open_sb.st_size );
> 
>             /* print the status */
>             fs_len = file_size_format ( s_progress->cProgressField[4] + s_progress->iBarLength - 21, *total_n_read, 0 );
>             s_progress->cProgressField[4][s_progress->iBarLength - 21 + fs_len] = ' ';
> 
>             /* print the field */
>             int it; 
>             for ( it = g_iTotalFiles>1 ? 0 : 3; it < 6; it++ )
>             {
>               printf ( "\033[K%s\n", s_progress->cProgressField[it] );
>               if ( strlen ( s_progress->cProgressField[it] ) < s_progress->iBarLength )
>                 printf ( "" );
>             }
>             if ( g_iTotalFiles > 1 )
>               printf ( "\r\033[6A" );
>             else
>               printf ( "\r\033[3A" );
>             fflush ( stdout );
>           }
>           /* END progress mod */
>       }
> 
> 
322a469,476
>     /* BEGIN progress mod */
>     if (progress) {
>           /* update total size */
>           g_iTotalWritten += *total_n_read / 1024;
>           g_iFilesCopied++;
>     }
>     /* END progress mod */
> 
391c545,547
<              bool *require_normal_copy)
---
>             bool *require_normal_copy,
>             int iCountDown, char ** cProgressField, struct timeval last_time, 
>             int last_size, int iBarLength, struct stat src_open_sb)
521a678,684
>               struct timeval a;
>               struct stat b;
> 
>               struct progress_status s_progress={iCountDown, cProgressField, last_time, last_size, iBarLength, src_open_sb};
> 
> 
> 
525c688
<                                   &read_hole))
---
>                                   &read_hole,&s_progress))
1273a1437,1501
>       /* BEGIN progress mod */
>       /* create a field of 6 lines */
>       char ** cProgressField = ( char ** ) calloc ( 6, sizeof ( char * ) );
>       /* get console width */
>       int iBarLength = 80;
>       struct winsize win;
>       if ( ioctl (STDOUT_FILENO, TIOCGWINSZ, (char *) &win) == 0 && win.ws_col > 0 )
>          iBarLength = win.ws_col;
>       /* create rows */
>       int it;
>       for ( it = 0; it < 6; it++ )
>       {
>         cProgressField[it] = ( char * ) malloc ( iBarLength + 1 );
>         /* init with spaces */
>         int j;
>         for ( j = 0; j < iBarLength; j++ )
>           cProgressField[it][j] = ' ';
>         cProgressField[it][iBarLength] = '\0';
>       }
> 
>       /* global progress bar? */
>       if ( g_iTotalFiles > 1 )
>       {
>         /* init global progress bar */
>         cProgressField[2][0] = '[';
>         cProgressField[2][iBarLength - 8] = ']';
>         cProgressField[2][iBarLength - 7] = ' ';
>         cProgressField[2][iBarLength - 1] = '%';
> 
>         /* total size */
>         cProgressField[1][iBarLength - 11] = '/';
>         file_size_format ( cProgressField[1] + iBarLength - 9, g_iTotalSize, 1 );
> 
>         /* show how many files were written */
>         int sum_length = sprintf ( cProgressField[1], "%d files copied so far...", g_iFilesCopied );
>         cProgressField[1][sum_length] = ' ';
>       }
> 
>       /* truncate filename? */
>       int fn_length;
>       if ( strlen ( src_name ) > iBarLength - 22 )
>         fn_length =
>           sprintf ( cProgressField[4], "...%s", src_name + ( strlen ( src_name ) - iBarLength + 25 ) );
>       else
>         fn_length = sprintf ( cProgressField[4], "%s", src_name );
>       cProgressField[4][fn_length] = ' ';
> 
>       /* filesize */
>       cProgressField[4][iBarLength - 11] = '/';
>       file_size_format ( cProgressField[4] + iBarLength - 9, src_open_sb.st_size, 0 );
> 
>       int iCountDown = 1;
>       char * sProgressBar = cProgressField[5];
>       sProgressBar[0] = '[';
>       sProgressBar[iBarLength - 8] = ']';
>       sProgressBar[iBarLength - 7] = ' ';
>       sProgressBar[iBarLength - 1] = '%';
> 
>       /* this will always save the time in between */
>       struct timeval last_time;
>       gettimeofday ( & last_time, NULL );
>       int last_size = g_iTotalWritten;
>       /* END progress mod */
> 
> 
1285c1513,1515
<                            src_name, dst_name, &normal_copy_required))
---
>                            src_name, dst_name, &normal_copy_required,
>                            iCountDown, cProgressField, last_time, last_size, 
>                            iBarLength, src_open_sb))
1296a1527
>       struct progress_status s_progress = { iCountDown, cProgressField, last_time, last_size, iBarLength, src_open_sb};
1301c1532
<                          &wrote_hole_at_eof))
---
>                          &wrote_hole_at_eof, &s_progress))
1311a1543,1550
>        /* BEGIN progress mod */
>       if (progress) {
>             int i;
>             for ( i = 0; i < 6; i++ )
>               free ( cProgressField[i] );
>             free ( cProgressField );
>       }
>       /* END progress mod */
diff coreutils-8.30/src/copy.h coreutils-8.30-patched/src/copy.h
236a237,240
>   /* If true, draw a nice progress bar on screen */ 
>   bool progress_bar; 
> 
> 
310a315,326
> 
> /* BEGIN OF PROGRESS MOD */
> int file_size_format ( char * _cDst, long _lSize, int _iCounter );
> 
> long g_iTotalSize; 
> long g_iTotalWritten; 
> int g_iFilesCopied; 
> struct timeval g_oStartTime; 
> int g_iTotalFiles; 
> bool progress; 
> /* END OF PROGRESS MOD */ 
> 
Nur in coreutils-8.30-patched/src/: copy.o.
Nur in coreutils-8.30-patched/src/: coreutils.h.
Nur in coreutils-8.30-patched/src/: cp.
diff coreutils-8.30/src/cp.c coreutils-8.30-patched/src/cp.c
133a134
>   {"progress-bar", no_argument, NULL, 'g'},
172a174
>   -g, --progress-bar           add a progress bar\n\
638a641,706
>     struct timeval start_time;
>     if (progress) {
>         /* BEGIN progress mod */
>         g_iTotalSize = 0;
>         g_iTotalFiles = 0;
>         g_iFilesCopied = 0;
>         g_iTotalWritten = 0;
> 
>         /* save time */
>         gettimeofday ( & start_time, NULL );
>         g_oStartTime = start_time;
> 
>         printf ( "Calculating total size... \r" );
>         fflush ( stdout );
>         long iTotalSize = 0;
>         int iFiles = n_files;
>         if ( ! target_directory )
>           iFiles = n_files - 1;
>         int j;
> 
>         /* how many files are we copying */ 
>         char command[1024]; 
>         sprintf( command, "find \"%s\" -type f | wc -l", file[0]); 
>         FILE *fp ; 
>         char output[1024]; 
>         fp = popen(command,"r");
>         if ( fp == NULL || fgets(output, sizeof(output)-1, fp) == NULL)
>             printf("failed to run find.\n"); 
>         else 
>             g_iTotalFiles = atoi( output ) ; 
> 
>         for (j = 0; j < iFiles; j++)
>         {
>           /* call du -s for each file */
>           /* create command */
>           char command[1024];
>           sprintf ( command, "du -s \"%s\"", file[j] );
>           /* TODO: replace all quote signs in file[i] */
> 
>           FILE *fp;
>           char output[1024];
> 
>           /* run command */
>           fp = popen(command, "r");
>           if (fp == NULL || fgets(output, sizeof(output)-1, fp) == NULL) {
>             printf("failed to run du.\n" );
>           }
>           else
>           {
>             /* isolate size */
>             strchr ( output, '\t' )[0] = '\0';
>             iTotalSize += atol ( output );
> 
>             printf ( "Calculating total size... %ld\r", iTotalSize );
>             fflush ( stdout );
>           }
> 
>           /* close */
>           pclose(fp);
>         }
>         g_iTotalSize = iTotalSize;
>         /* END progress mod */
>     }
> 
> 
> 
779a848,888
>     if (progress) {
>         /* BEGIN progress mod */
>         /* remove everything */
>         int i;
>         if ( g_iTotalFiles > 1 )
>         {
>           for ( i = 0; i < 6; i++ )
>             printf ( "\033[K\n" );
>           printf ( "\r\033[6A" );
>         }
>         else
>         {
>           for ( i = 0; i < 3; i++ )
>             printf ( "\033[K\n" );
>           printf ( "\r\033[3A" );
>         }
> 
>         /* save time */
>         struct timeval end_time;
>         gettimeofday ( & end_time, NULL );
>         int usec_elapsed = end_time.tv_usec - start_time.tv_usec;
>         double sec_elapsed = ( double ) usec_elapsed / 1000000.f;
>         sec_elapsed += ( double ) ( end_time.tv_sec - start_time.tv_sec );
> 
>         /* get total size */
>         char sTotalWritten[20];
>         file_size_format ( sTotalWritten, g_iTotalSize, 1 );
>         /* TODO: using g_iTotalWritten would be more correct, but is less accurate */
> 
>         /* calculate speed */
>         int copy_speed = ( int ) ( ( double ) g_iTotalWritten / sec_elapsed );
>         char s_copy_speed[20];
>         file_size_format ( s_copy_speed, copy_speed, 1 );
> 
>         /* good-bye message */
>         printf ( "%d files (%s) copied in %.1f seconds (%s/s).\n", g_iFilesCopied, sTotalWritten,
>                  sec_elapsed, s_copy_speed );
>         /* END progress mod */
>     }
> 
> 
814a924
>   x->progress_bar = false; 
953c1063
<   while ((c = getopt_long (argc, argv, "abdfHilLnprst:uvxPRS:TZ",
---
>   while ((c = getopt_long (argc, argv, "abdfgHilLnprst:uvxPRS:TZ",
1008a1119,1123
> 
>         case 'g': 
>           progress = true; 
>           break; 
> 
Nur in coreutils-8.30-patched/src/: cp-hash.o.
Nur in coreutils-8.30-patched/src/: cp.o.
Nur in coreutils-8.30-patched/src/: csplit.
Nur in coreutils-8.30-patched/src/: csplit.o.
Nur in coreutils-8.30-patched/src/: cut.
Nur in coreutils-8.30-patched/src/: cut.o.
Nur in coreutils-8.30-patched/src/: date.
Nur in coreutils-8.30-patched/src/: date.o.
Nur in coreutils-8.30-patched/src/: dd.
Nur in coreutils-8.30-patched/src/: dd.o.
Nur in coreutils-8.30-patched/src/: .deps.
Nur in coreutils-8.30-patched/src/: df.
Nur in coreutils-8.30-patched/src/: df.o.
Nur in coreutils-8.30-patched/src/: dir.
Nur in coreutils-8.30-patched/src/: dircolors.
Nur in coreutils-8.30-patched/src/: dircolors.o.
Nur in coreutils-8.30-patched/src/: dirname.
Nur in coreutils-8.30-patched/src/: dirname.o.
Nur in coreutils-8.30-patched/src/: .dirstamp.
Nur in coreutils-8.30-patched/src/: du.
Nur in coreutils-8.30-patched/src/: du.o.
Nur in coreutils-8.30-patched/src/: echo.
Nur in coreutils-8.30-patched/src/: echo.o.
Nur in coreutils-8.30-patched/src/: env.
Nur in coreutils-8.30-patched/src/: env.o.
Nur in coreutils-8.30-patched/src/: expand.
Nur in coreutils-8.30-patched/src/: expand-common.o.
Nur in coreutils-8.30-patched/src/: expand.o.
Nur in coreutils-8.30-patched/src/: expr.
Nur in coreutils-8.30-patched/src/: expr.o.
Nur in coreutils-8.30-patched/src/: extent-scan.o.
Nur in coreutils-8.30-patched/src/: factor.
Nur in coreutils-8.30-patched/src/: factor.o.
Nur in coreutils-8.30-patched/src/: false.
Nur in coreutils-8.30-patched/src/: false.o.
Nur in coreutils-8.30-patched/src/: find-mount-point.o.
Nur in coreutils-8.30-patched/src/: fmt.
Nur in coreutils-8.30-patched/src/: fmt.o.
Nur in coreutils-8.30-patched/src/: fold.
Nur in coreutils-8.30-patched/src/: fold.o.
Nur in coreutils-8.30-patched/src/: force-link.o.
Nur in coreutils-8.30-patched/src/: getlimits.
Nur in coreutils-8.30-patched/src/: getlimits.o.
Nur in coreutils-8.30-patched/src/: ginstall.
Nur in coreutils-8.30-patched/src/: group-list.o.
Nur in coreutils-8.30-patched/src/: groups.
Nur in coreutils-8.30-patched/src/: groups.o.
Nur in coreutils-8.30-patched/src/: head.
Nur in coreutils-8.30-patched/src/: head.o.
Nur in coreutils-8.30-patched/src/: hostid.
Nur in coreutils-8.30-patched/src/: hostid.o.
Nur in coreutils-8.30-patched/src/: id.
Nur in coreutils-8.30-patched/src/: id.o.
Nur in coreutils-8.30-patched/src/: join.
Nur in coreutils-8.30-patched/src/: join.o.
Nur in coreutils-8.30-patched/src/: kill.
Nur in coreutils-8.30-patched/src/: kill.o.
Nur in coreutils-8.30-patched/src/: lbracket.o.
Nur in coreutils-8.30-patched/src/: libstdbuf.so.
Nur in coreutils-8.30-patched/src/: libver.a.
Nur in coreutils-8.30-patched/src/: link.
Nur in coreutils-8.30-patched/src/: link.o.
Nur in coreutils-8.30-patched/src/: ln.
Nur in coreutils-8.30-patched/src/: ln.o.
Nur in coreutils-8.30-patched/src/: logname.
Nur in coreutils-8.30-patched/src/: logname.o.
Nur in coreutils-8.30-patched/src/: ls.
Nur in coreutils-8.30-patched/src/: ls-dir.o.
Nur in coreutils-8.30-patched/src/: ls-ls.o.
Nur in coreutils-8.30-patched/src/: ls.o.
Nur in coreutils-8.30-patched/src/: ls-vdir.o.
Nur in coreutils-8.30-patched/src/: make-prime-list.
Nur in coreutils-8.30-patched/src/: make-prime-list.o.
Nur in coreutils-8.30-patched/src/: md5sum.
Nur in coreutils-8.30-patched/src/: mkdir.
Nur in coreutils-8.30-patched/src/: mkdir.o.
Nur in coreutils-8.30-patched/src/: mkfifo.
Nur in coreutils-8.30-patched/src/: mkfifo.o.
Nur in coreutils-8.30-patched/src/: mknod.
Nur in coreutils-8.30-patched/src/: mknod.o.
Nur in coreutils-8.30-patched/src/: mktemp.
Nur in coreutils-8.30-patched/src/: mktemp.o.
Nur in coreutils-8.30-patched/src/: mv.
diff coreutils-8.30/src/mv.c coreutils-8.30-patched/src/mv.c
3d2
< 
8d6
< 
13d10
< 
16d12
< 
18d13
< 
25d19
< 
37d30
< 
40d32
< 
45d36
< 
52d42
< 
55d44
< 
68a58
>   {"progress-ar", no_argument, NULL, 'g'},
73d62
< 
81d69
< 
86d73
< 
88d74
< 
94d79
< 
102d86
< 
105d88
< 
110d92
< 
141d122
< 
148d128
< 
152d131
< 
163d141
< 
167d144
< 
170a148,193
>   struct timeval start_time;
> 
>   if(progress) {
>     /* BEGIN progress mod */
>     g_iTotalSize = 0;
>     g_iFilesCopied = 0;
>     g_iTotalWritten = 0;
> 
>     gettimeofday (& start_time, NULL);
>     g_oStartTime = start_time;
> 
>     printf ("Calculating total size... \r");
>     fflush (stdout);
>     long iTotalSize = 0;
>     /* call du -s for each file */
>     /* create command */
>     char command[1024];
>     sprintf ( command, "du -s \"%s\"", source );
>     /* TODO: replace all quote signs in file[i] */
> 
>     FILE *fp;
>     char output[1024];
> 
>     /* run command */
>     fp = popen(command, "r");
>     if (fp == NULL || fgets(output, sizeof(output)-1, fp) == NULL) {
>       printf("failed to run du.\n" );
>     }
>     else
>     {
>       /* isolate size */
>       strchr ( output, '\t' )[0] = '\0';
>       iTotalSize += atol ( output );
>       printf ( "Calculating total size... %ld\r", iTotalSize );
>       fflush ( stdout );
>     }
> 
>     /* close */
>     pclose(fp);
>     g_iTotalSize = iTotalSize;
>     /* END progress mod */
> 
>   }
> 
> 
> 
173a197,235
>   if (progress) {
>     /* BEGIN progress mod */
>     /* remove everything */
>     int i;
>     if ( g_iTotalFiles > 1 )
>     {
>       for ( i = 0; i < 6; i++ )
>         printf ( "\033[K\n" );
>       printf ( "\r\033[6A" );
>     }
>     else
>     {
>       for ( i = 0; i < 3; i++ )
>         printf ( "\033[K\n" );
>       printf ( "\r\033[3A" );
>     }
> 
>     /* save time */
>     struct timeval end_time;
>     gettimeofday ( & end_time, NULL );
>     int usec_elapsed = end_time.tv_usec - start_time.tv_usec;
>     double sec_elapsed = ( double ) usec_elapsed / 1000000.f;
>     sec_elapsed += ( double ) ( end_time.tv_sec - start_time.tv_sec );
> 
>     /* get total size */
>     char sTotalWritten[20];
>     file_size_format ( sTotalWritten, g_iTotalSize, 1 );
>     /* TODO: using g_iTotalWritten would be more correct, but is less accurate */
> 
>     /* calculate speed */
>     int copy_speed = ( int ) ( ( double ) g_iTotalWritten / sec_elapsed );
>     char s_copy_speed[20];
>     file_size_format ( s_copy_speed, copy_speed, 1 );
> 
>     /* good-bye message */
>     printf ( "%d files (%s) moved in %.1f seconds (%s/s).\n", g_iFilesCopied, sTotalWritten,
>              sec_elapsed, s_copy_speed );
>     /* END progress mod */
>   }
190d251
< 
205d265
< 
211d270
< 
217d275
< 
220d277
< 
223d279
< 
226d281
< 
232d286
< 
237d290
< 
244d296
< 
247d298
< 
251d301
< 
257d306
< 
264d312
< 
267d314
< 
281d327
< 
284d329
< 
301d345
< 
303d346
< 
308a352
>   -g, --progress-bar           add progress-bar\n\
335d378
< 
350d392
< 
356d397
< 
358d398
< 
360d399
< 
363,364c402
< 
<   while ((c = getopt_long (argc, argv, "bfint:uvS:TZ", long_options, NULL))
---
>   while ((c = getopt_long (argc, argv, "bfint:uvgS:TZ", long_options, NULL))
409a448,452
> 
>         case 'g': 
>           progress = true; 
>           break; 
> 
429d471
< 
432d473
< 
442d482
< 
471d510
< 
474d512
< 
481d518
< 
487d523
< 
489d524
< 
497d531
< 
510d543
< 
Nur in coreutils-8.30-patched/src/: mv.o.
Nur in coreutils-8.30-patched/src/: nice.
Nur in coreutils-8.30-patched/src/: nice.o.
Nur in coreutils-8.30-patched/src/: nl.
Nur in coreutils-8.30-patched/src/: nl.o.
Nur in coreutils-8.30-patched/src/: nohup.
Nur in coreutils-8.30-patched/src/: nohup.o.
Nur in coreutils-8.30-patched/src/: nproc.
Nur in coreutils-8.30-patched/src/: nproc.o.
Nur in coreutils-8.30-patched/src/: numfmt.
Nur in coreutils-8.30-patched/src/: numfmt.o.
Nur in coreutils-8.30-patched/src/: od.
Nur in coreutils-8.30-patched/src/: od.o.
Nur in coreutils-8.30-patched/src/: operand2sig.o.
Nur in coreutils-8.30-patched/src/: paste.
Nur in coreutils-8.30-patched/src/: paste.o.
Nur in coreutils-8.30-patched/src/: pathchk.
Nur in coreutils-8.30-patched/src/: pathchk.o.
Nur in coreutils-8.30-patched/src/: pinky.
Nur in coreutils-8.30-patched/src/: pinky.o.
Nur in coreutils-8.30-patched/src/: pr.
Nur in coreutils-8.30-patched/src/: printenv.
Nur in coreutils-8.30-patched/src/: printenv.o.
Nur in coreutils-8.30-patched/src/: printf.
Nur in coreutils-8.30-patched/src/: printf.o.
Nur in coreutils-8.30-patched/src/: pr.o.
Nur in coreutils-8.30-patched/src/: prog-fprintf.o.
Nur in coreutils-8.30-patched/src/: ptx.
Nur in coreutils-8.30-patched/src/: ptx.o.
Nur in coreutils-8.30-patched/src/: pwd.
Nur in coreutils-8.30-patched/src/: pwd.o.
Nur in coreutils-8.30-patched/src/: readlink.
Nur in coreutils-8.30-patched/src/: readlink.o.
Nur in coreutils-8.30-patched/src/: realpath.
Nur in coreutils-8.30-patched/src/: realpath.o.
Nur in coreutils-8.30-patched/src/: relpath.o.
Nur in coreutils-8.30-patched/src/: remove.o.
Nur in coreutils-8.30-patched/src/: rm.
Nur in coreutils-8.30-patched/src/: rmdir.
Nur in coreutils-8.30-patched/src/: rmdir.o.
Nur in coreutils-8.30-patched/src/: rm.o.
Nur in coreutils-8.30-patched/src/: runcon.
Nur in coreutils-8.30-patched/src/: runcon.o.
Nur in coreutils-8.30-patched/src/: selinux.o.
Nur in coreutils-8.30-patched/src/: seq.
Nur in coreutils-8.30-patched/src/: seq.o.
Nur in coreutils-8.30-patched/src/: set-fields.o.
Nur in coreutils-8.30-patched/src/: sha1sum.
Nur in coreutils-8.30-patched/src/: sha224sum.
Nur in coreutils-8.30-patched/src/: sha256sum.
Nur in coreutils-8.30-patched/src/: sha384sum.
Nur in coreutils-8.30-patched/src/: sha512sum.
Nur in coreutils-8.30-patched/src/: shred.
Nur in coreutils-8.30-patched/src/: shred.o.
Nur in coreutils-8.30-patched/src/: shuf.
Nur in coreutils-8.30-patched/src/: shuf.o.
Nur in coreutils-8.30-patched/src/: sleep.
Nur in coreutils-8.30-patched/src/: sleep.o.
Nur in coreutils-8.30-patched/src/: sort.
Nur in coreutils-8.30-patched/src/: sort.o.
Nur in coreutils-8.30-patched/src/: split.
Nur in coreutils-8.30-patched/src/: split.o.
Nur in coreutils-8.30-patched/src/: src_b2sum-md5sum.o.
Nur in coreutils-8.30-patched/src/: src_base32-base64.o.
Nur in coreutils-8.30-patched/src/: src_base64-base64.o.
Nur in coreutils-8.30-patched/src/: src_ginstall-copy.o.
Nur in coreutils-8.30-patched/src/: src_ginstall-cp-hash.o.
Nur in coreutils-8.30-patched/src/: src_ginstall-extent-scan.o.
Nur in coreutils-8.30-patched/src/: src_ginstall-force-link.o.
Nur in coreutils-8.30-patched/src/: src_ginstall-install.o.
Nur in coreutils-8.30-patched/src/: src_ginstall-prog-fprintf.o.
Nur in coreutils-8.30-patched/src/: src_ginstall-selinux.o.
Nur in coreutils-8.30-patched/src/: src_libstdbuf_so-libstdbuf.o.
Nur in coreutils-8.30-patched/src/: src_md5sum-md5sum.o.
Nur in coreutils-8.30-patched/src/: src_sha1sum-md5sum.o.
Nur in coreutils-8.30-patched/src/: src_sha224sum-md5sum.o.
Nur in coreutils-8.30-patched/src/: src_sha256sum-md5sum.o.
Nur in coreutils-8.30-patched/src/: src_sha384sum-md5sum.o.
Nur in coreutils-8.30-patched/src/: src_sha512sum-md5sum.o.
Nur in coreutils-8.30-patched/src/: stat.
Nur in coreutils-8.30-patched/src/: stat.o.
Nur in coreutils-8.30-patched/src/: stdbuf.
Nur in coreutils-8.30-patched/src/: stdbuf.o.
Nur in coreutils-8.30-patched/src/: stty.
Nur in coreutils-8.30-patched/src/: stty.o.
Nur in coreutils-8.30-patched/src/: sum.
Nur in coreutils-8.30-patched/src/: sum.o.
Nur in coreutils-8.30-patched/src/: sync.
Nur in coreutils-8.30-patched/src/: sync.o.
Nur in coreutils-8.30-patched/src/: tac.
Nur in coreutils-8.30-patched/src/: tac.o.
Nur in coreutils-8.30-patched/src/: tail.
Nur in coreutils-8.30-patched/src/: tail.o.
Nur in coreutils-8.30-patched/src/: tee.
Nur in coreutils-8.30-patched/src/: tee.o.
Nur in coreutils-8.30-patched/src/: test.
Nur in coreutils-8.30-patched/src/: test.o.
Nur in coreutils-8.30-patched/src/: timeout.
Nur in coreutils-8.30-patched/src/: timeout.o.
Nur in coreutils-8.30-patched/src/: touch.
Nur in coreutils-8.30-patched/src/: touch.o.
Nur in coreutils-8.30-patched/src/: tr.
Nur in coreutils-8.30-patched/src/: tr.o.
Nur in coreutils-8.30-patched/src/: true.
Nur in coreutils-8.30-patched/src/: true.o.
Nur in coreutils-8.30-patched/src/: truncate.
Nur in coreutils-8.30-patched/src/: truncate.o.
Nur in coreutils-8.30-patched/src/: tsort.
Nur in coreutils-8.30-patched/src/: tsort.o.
Nur in coreutils-8.30-patched/src/: tty.
Nur in coreutils-8.30-patched/src/: tty.o.
Nur in coreutils-8.30-patched/src/: uname.
Nur in coreutils-8.30-patched/src/: uname.o.
Nur in coreutils-8.30-patched/src/: uname-uname.o.
Nur in coreutils-8.30-patched/src/: unexpand.
Nur in coreutils-8.30-patched/src/: unexpand.o.
Nur in coreutils-8.30-patched/src/: uniq.
Nur in coreutils-8.30-patched/src/: uniq.o.
Nur in coreutils-8.30-patched/src/: unlink.
Nur in coreutils-8.30-patched/src/: unlink.o.
Nur in coreutils-8.30-patched/src/: uptime.
Nur in coreutils-8.30-patched/src/: uptime.o.
Nur in coreutils-8.30-patched/src/: users.
Nur in coreutils-8.30-patched/src/: users.o.
Nur in coreutils-8.30-patched/src/: vdir.
Nur in coreutils-8.30-patched/src/: version.c.
Nur in coreutils-8.30-patched/src/: version.h.
Nur in coreutils-8.30-patched/src/: version.o.
Nur in coreutils-8.30-patched/src/: wc.
Nur in coreutils-8.30-patched/src/: wc.o.
Nur in coreutils-8.30-patched/src/: who.
Nur in coreutils-8.30-patched/src/: whoami.
Nur in coreutils-8.30-patched/src/: whoami.o.
Nur in coreutils-8.30-patched/src/: who.o.
Nur in coreutils-8.30-patched/src/: yes.
Nur in coreutils-8.30-patched/src/: yes.o.
